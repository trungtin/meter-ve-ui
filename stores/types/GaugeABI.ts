/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimFees = ContractEventLog<{
  from: string;
  claimed0: string;
  claimed1: string;
  0: string;
  1: string;
  2: string;
}>;
export type ClaimRewards = ContractEventLog<{
  from: string;
  reward: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  from: string;
  tokenId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type NotifyReward = ContractEventLog<{
  from: string;
  reward: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  from: string;
  tokenId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface GaugeABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GaugeABI;
  clone(): GaugeABI;
  methods: {
    _ve(): NonPayableTransactionObject<string>;

    balanceOf(arg0: string): NonPayableTransactionObject<string>;

    batchRewardPerToken(
      token: string,
      maxRuns: number | string | BN
    ): NonPayableTransactionObject<void>;

    bribe(): NonPayableTransactionObject<string>;

    checkpoints(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      timestamp: string;
      balanceOf: string;
      0: string;
      1: string;
    }>;

    claimFees(): NonPayableTransactionObject<{
      claimed0: string;
      claimed1: string;
      0: string;
      1: string;
    }>;

    deposit(
      amount: number | string | BN,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositAll(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    derivedBalance(account: string): NonPayableTransactionObject<string>;

    derivedBalances(arg0: string): NonPayableTransactionObject<string>;

    derivedSupply(): NonPayableTransactionObject<string>;

    earned(token: string, account: string): NonPayableTransactionObject<string>;

    fees0(): NonPayableTransactionObject<string>;

    fees1(): NonPayableTransactionObject<string>;

    getPriorBalanceIndex(
      account: string,
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPriorRewardPerToken(
      token: string,
      timestamp: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getPriorSupplyIndex(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getReward(
      account: string,
      tokens: string[]
    ): NonPayableTransactionObject<void>;

    isReward(arg0: string): NonPayableTransactionObject<boolean>;

    lastEarn(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    lastTimeRewardApplicable(
      token: string
    ): NonPayableTransactionObject<string>;

    lastUpdateTime(arg0: string): NonPayableTransactionObject<string>;

    left(token: string): NonPayableTransactionObject<string>;

    notifyRewardAmount(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    numCheckpoints(arg0: string): NonPayableTransactionObject<string>;

    periodFinish(arg0: string): NonPayableTransactionObject<string>;

    rewardPerToken(token: string): NonPayableTransactionObject<string>;

    rewardPerTokenCheckpoints(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      timestamp: string;
      rewardPerToken: string;
      0: string;
      1: string;
    }>;

    rewardPerTokenNumCheckpoints(
      arg0: string
    ): NonPayableTransactionObject<string>;

    rewardPerTokenStored(arg0: string): NonPayableTransactionObject<string>;

    rewardRate(arg0: string): NonPayableTransactionObject<string>;

    rewards(arg0: number | string | BN): NonPayableTransactionObject<string>;

    rewardsListLength(): NonPayableTransactionObject<string>;

    stake(): NonPayableTransactionObject<string>;

    supplyCheckpoints(arg0: number | string | BN): NonPayableTransactionObject<{
      timestamp: string;
      supply: string;
      0: string;
      1: string;
    }>;

    supplyNumCheckpoints(): NonPayableTransactionObject<string>;

    tokenIds(arg0: string): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    userRewardPerTokenStored(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    voter(): NonPayableTransactionObject<string>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawAll(): NonPayableTransactionObject<void>;

    withdrawToken(
      amount: number | string | BN,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ClaimFees(cb?: Callback<ClaimFees>): EventEmitter;
    ClaimFees(options?: EventOptions, cb?: Callback<ClaimFees>): EventEmitter;

    ClaimRewards(cb?: Callback<ClaimRewards>): EventEmitter;
    ClaimRewards(
      options?: EventOptions,
      cb?: Callback<ClaimRewards>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    NotifyReward(cb?: Callback<NotifyReward>): EventEmitter;
    NotifyReward(
      options?: EventOptions,
      cb?: Callback<NotifyReward>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ClaimFees", cb: Callback<ClaimFees>): void;
  once(
    event: "ClaimFees",
    options: EventOptions,
    cb: Callback<ClaimFees>
  ): void;

  once(event: "ClaimRewards", cb: Callback<ClaimRewards>): void;
  once(
    event: "ClaimRewards",
    options: EventOptions,
    cb: Callback<ClaimRewards>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "NotifyReward", cb: Callback<NotifyReward>): void;
  once(
    event: "NotifyReward",
    options: EventOptions,
    cb: Callback<NotifyReward>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
