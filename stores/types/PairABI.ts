/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Burn = ContractEventLog<{
  sender: string;
  amount0: string;
  amount1: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Claim = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Fees = ContractEventLog<{
  sender: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
}>;
export type Mint = ContractEventLog<{
  sender: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
}>;
export type Swap = ContractEventLog<{
  sender: string;
  amount0In: string;
  amount1In: string;
  amount0Out: string;
  amount1Out: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Sync = ContractEventLog<{
  reserve0: string;
  reserve1: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface PairABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PairABI;
  clone(): PairABI;
  methods: {
    allowance(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(arg0: string): NonPayableTransactionObject<string>;

    blockTimestampLast(): NonPayableTransactionObject<string>;

    burn(to: string): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    claimFees(): NonPayableTransactionObject<{
      claimed0: string;
      claimed1: string;
      0: string;
      1: string;
    }>;

    claimable0(arg0: string): NonPayableTransactionObject<string>;

    claimable1(arg0: string): NonPayableTransactionObject<string>;

    current(
      tokenIn: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    currentCumulativePrices(): NonPayableTransactionObject<{
      reserve0Cumulative: string;
      reserve1Cumulative: string;
      blockTimestamp: string;
      0: string;
      1: string;
      2: string;
    }>;

    decimals(): NonPayableTransactionObject<string>;

    fees(): NonPayableTransactionObject<string>;

    getAmountOut(
      amountIn: number | string | BN,
      tokenIn: string
    ): NonPayableTransactionObject<string>;

    getReserves(): NonPayableTransactionObject<{
      _reserve0: string;
      _reserve1: string;
      _blockTimestampLast: string;
      0: string;
      1: string;
      2: string;
    }>;

    index0(): NonPayableTransactionObject<string>;

    index1(): NonPayableTransactionObject<string>;

    lastObservation(): NonPayableTransactionObject<[string, string, string]>;

    metadata(): NonPayableTransactionObject<{
      dec0: string;
      dec1: string;
      r0: string;
      r1: string;
      st: boolean;
      t0: string;
      t1: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
      5: string;
      6: string;
    }>;

    mint(to: string): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    nonces(arg0: string): NonPayableTransactionObject<string>;

    observationLength(): NonPayableTransactionObject<string>;

    observations(arg0: number | string | BN): NonPayableTransactionObject<{
      timestamp: string;
      reserve0Cumulative: string;
      reserve1Cumulative: string;
      0: string;
      1: string;
      2: string;
    }>;

    permit(
      owner: string,
      spender: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    prices(
      tokenIn: string,
      amountIn: number | string | BN,
      points: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    quote(
      tokenIn: string,
      amountIn: number | string | BN,
      granularity: number | string | BN
    ): NonPayableTransactionObject<string>;

    reserve0(): NonPayableTransactionObject<string>;

    reserve0CumulativeLast(): NonPayableTransactionObject<string>;

    reserve1(): NonPayableTransactionObject<string>;

    reserve1CumulativeLast(): NonPayableTransactionObject<string>;

    sample(
      tokenIn: string,
      amountIn: number | string | BN,
      points: number | string | BN,
      window: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    skim(to: string): NonPayableTransactionObject<void>;

    stable(): NonPayableTransactionObject<boolean>;

    supplyIndex0(arg0: string): NonPayableTransactionObject<string>;

    supplyIndex1(arg0: string): NonPayableTransactionObject<string>;

    swap(
      amount0Out: number | string | BN,
      amount1Out: number | string | BN,
      to: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    sync(): NonPayableTransactionObject<void>;

    token0(): NonPayableTransactionObject<string>;

    token1(): NonPayableTransactionObject<string>;

    tokens(): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      dst: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    Fees(cb?: Callback<Fees>): EventEmitter;
    Fees(options?: EventOptions, cb?: Callback<Fees>): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    Swap(cb?: Callback<Swap>): EventEmitter;
    Swap(options?: EventOptions, cb?: Callback<Swap>): EventEmitter;

    Sync(cb?: Callback<Sync>): EventEmitter;
    Sync(options?: EventOptions, cb?: Callback<Sync>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;

  once(event: "Fees", cb: Callback<Fees>): void;
  once(event: "Fees", options: EventOptions, cb: Callback<Fees>): void;

  once(event: "Mint", cb: Callback<Mint>): void;
  once(event: "Mint", options: EventOptions, cb: Callback<Mint>): void;

  once(event: "Swap", cb: Callback<Swap>): void;
  once(event: "Swap", options: EventOptions, cb: Callback<Swap>): void;

  once(event: "Sync", cb: Callback<Sync>): void;
  once(event: "Sync", options: EventOptions, cb: Callback<Sync>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
