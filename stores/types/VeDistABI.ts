/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CheckpointToken = ContractEventLog<{
  time: string;
  tokens: string;
  0: string;
  1: string;
}>;
export type Claimed = ContractEventLog<{
  tokenId: string;
  amount: string;
  claim_epoch: string;
  max_epoch: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SetDepositor = ContractEventLog<{
  depositor: string;
  0: string;
}>;

export interface VeDistABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VeDistABI;
  clone(): VeDistABI;
  methods: {
    checkpoint_token(): NonPayableTransactionObject<void>;

    checkpoint_total_supply(): NonPayableTransactionObject<void>;

    claim(_tokenId: number | string | BN): NonPayableTransactionObject<string>;

    claim_many(
      _tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean>;

    claimable(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    depositor(): NonPayableTransactionObject<string>;

    last_token_time(): NonPayableTransactionObject<string>;

    setDepositor(_depositor: string): NonPayableTransactionObject<void>;

    start_time(): NonPayableTransactionObject<string>;

    time_cursor(): NonPayableTransactionObject<string>;

    time_cursor_of(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    timestamp(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    token_last_balance(): NonPayableTransactionObject<string>;

    tokens_per_week(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    user_epoch_of(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    ve_for_at(
      _tokenId: number | string | BN,
      _timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    ve_supply(arg0: number | string | BN): NonPayableTransactionObject<string>;

    voting_escrow(): NonPayableTransactionObject<string>;
  };
  events: {
    CheckpointToken(cb?: Callback<CheckpointToken>): EventEmitter;
    CheckpointToken(
      options?: EventOptions,
      cb?: Callback<CheckpointToken>
    ): EventEmitter;

    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    SetDepositor(cb?: Callback<SetDepositor>): EventEmitter;
    SetDepositor(
      options?: EventOptions,
      cb?: Callback<SetDepositor>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CheckpointToken", cb: Callback<CheckpointToken>): void;
  once(
    event: "CheckpointToken",
    options: EventOptions,
    cb: Callback<CheckpointToken>
  ): void;

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "SetDepositor", cb: Callback<SetDepositor>): void;
  once(
    event: "SetDepositor",
    options: EventOptions,
    cb: Callback<SetDepositor>
  ): void;
}
