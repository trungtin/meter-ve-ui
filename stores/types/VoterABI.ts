/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Abstained = ContractEventLog<{
  tokenId: string;
  weight: string;
  0: string;
  1: string;
}>;
export type Attach = ContractEventLog<{
  owner: string;
  gauge: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  lp: string;
  gauge: string;
  tokenId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Detach = ContractEventLog<{
  owner: string;
  gauge: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type DistributeReward = ContractEventLog<{
  sender: string;
  gauge: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type GaugeCreated = ContractEventLog<{
  gauge: string;
  creator: string;
  bribe: string;
  pool: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Initialize = ContractEventLog<{
  minter: string;
  0: string;
}>;
export type NotifyReward = ContractEventLog<{
  sender: string;
  reward: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Voted = ContractEventLog<{
  voter: string;
  tokenId: string;
  weight: string;
  0: string;
  1: string;
  2: string;
}>;
export type Whitelisted = ContractEventLog<{
  whitelister: string;
  token: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  lp: string;
  gauge: string;
  tokenId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface VoterABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VoterABI;
  clone(): VoterABI;
  methods: {
    _ve(): NonPayableTransactionObject<string>;

    attachTokenToGauge(
      tokenId: number | string | BN,
      account: string
    ): NonPayableTransactionObject<void>;

    bribefactory(): NonPayableTransactionObject<string>;

    bribes(arg0: string): NonPayableTransactionObject<string>;

    claimBribes(
      _bribes: string[],
      _tokens: string[][],
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimFees(
      _fees: string[],
      _tokens: string[][],
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimRewards(
      _gauges: string[],
      _tokens: string[][]
    ): NonPayableTransactionObject<void>;

    claimable(arg0: string): NonPayableTransactionObject<string>;

    createGauge(_pool: string): NonPayableTransactionObject<string>;

    detachTokenFromGauge(
      tokenId: number | string | BN,
      account: string
    ): NonPayableTransactionObject<void>;

    "distribute(address[])"(
      _gauges: string[]
    ): NonPayableTransactionObject<void>;

    "distribute(address)"(_gauge: string): NonPayableTransactionObject<void>;

    "distribute(uint256,uint256)"(
      start: number | string | BN,
      finish: number | string | BN
    ): NonPayableTransactionObject<void>;

    "distribute()"(): NonPayableTransactionObject<void>;

    distributeFees(_gauges: string[]): NonPayableTransactionObject<void>;

    distro(): NonPayableTransactionObject<void>;

    emitDeposit(
      tokenId: number | string | BN,
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    emitWithdraw(
      tokenId: number | string | BN,
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    factory(): NonPayableTransactionObject<string>;

    gaugefactory(): NonPayableTransactionObject<string>;

    gauges(arg0: string): NonPayableTransactionObject<string>;

    initialize(
      _tokens: string[],
      _minter: string
    ): NonPayableTransactionObject<void>;

    isGauge(arg0: string): NonPayableTransactionObject<boolean>;

    isWhitelisted(arg0: string): NonPayableTransactionObject<boolean>;

    length(): NonPayableTransactionObject<string>;

    listing_fee(): NonPayableTransactionObject<string>;

    minter(): NonPayableTransactionObject<string>;

    notifyRewardAmount(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    poke(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    poolForGauge(arg0: string): NonPayableTransactionObject<string>;

    poolVote(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    pools(arg0: number | string | BN): NonPayableTransactionObject<string>;

    reset(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    totalWeight(): NonPayableTransactionObject<string>;

    updateAll(): NonPayableTransactionObject<void>;

    updateFor(_gauges: string[]): NonPayableTransactionObject<void>;

    updateForRange(
      start: number | string | BN,
      end: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateGauge(_gauge: string): NonPayableTransactionObject<void>;

    usedWeights(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    vote(
      tokenId: number | string | BN,
      _poolVote: string[],
      _weights: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    votes(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    weights(arg0: string): NonPayableTransactionObject<string>;

    whitelist(
      _token: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Abstained(cb?: Callback<Abstained>): EventEmitter;
    Abstained(options?: EventOptions, cb?: Callback<Abstained>): EventEmitter;

    Attach(cb?: Callback<Attach>): EventEmitter;
    Attach(options?: EventOptions, cb?: Callback<Attach>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Detach(cb?: Callback<Detach>): EventEmitter;
    Detach(options?: EventOptions, cb?: Callback<Detach>): EventEmitter;

    DistributeReward(cb?: Callback<DistributeReward>): EventEmitter;
    DistributeReward(
      options?: EventOptions,
      cb?: Callback<DistributeReward>
    ): EventEmitter;

    GaugeCreated(cb?: Callback<GaugeCreated>): EventEmitter;
    GaugeCreated(
      options?: EventOptions,
      cb?: Callback<GaugeCreated>
    ): EventEmitter;

    Initialize(cb?: Callback<Initialize>): EventEmitter;
    Initialize(options?: EventOptions, cb?: Callback<Initialize>): EventEmitter;

    NotifyReward(cb?: Callback<NotifyReward>): EventEmitter;
    NotifyReward(
      options?: EventOptions,
      cb?: Callback<NotifyReward>
    ): EventEmitter;

    Voted(cb?: Callback<Voted>): EventEmitter;
    Voted(options?: EventOptions, cb?: Callback<Voted>): EventEmitter;

    Whitelisted(cb?: Callback<Whitelisted>): EventEmitter;
    Whitelisted(
      options?: EventOptions,
      cb?: Callback<Whitelisted>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Abstained", cb: Callback<Abstained>): void;
  once(
    event: "Abstained",
    options: EventOptions,
    cb: Callback<Abstained>
  ): void;

  once(event: "Attach", cb: Callback<Attach>): void;
  once(event: "Attach", options: EventOptions, cb: Callback<Attach>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Detach", cb: Callback<Detach>): void;
  once(event: "Detach", options: EventOptions, cb: Callback<Detach>): void;

  once(event: "DistributeReward", cb: Callback<DistributeReward>): void;
  once(
    event: "DistributeReward",
    options: EventOptions,
    cb: Callback<DistributeReward>
  ): void;

  once(event: "GaugeCreated", cb: Callback<GaugeCreated>): void;
  once(
    event: "GaugeCreated",
    options: EventOptions,
    cb: Callback<GaugeCreated>
  ): void;

  once(event: "Initialize", cb: Callback<Initialize>): void;
  once(
    event: "Initialize",
    options: EventOptions,
    cb: Callback<Initialize>
  ): void;

  once(event: "NotifyReward", cb: Callback<NotifyReward>): void;
  once(
    event: "NotifyReward",
    options: EventOptions,
    cb: Callback<NotifyReward>
  ): void;

  once(event: "Voted", cb: Callback<Voted>): void;
  once(event: "Voted", options: EventOptions, cb: Callback<Voted>): void;

  once(event: "Whitelisted", cb: Callback<Whitelisted>): void;
  once(
    event: "Whitelisted",
    options: EventOptions,
    cb: Callback<Whitelisted>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
