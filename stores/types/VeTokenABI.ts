/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Abstain = ContractEventLog<{
  tokenId: string;
  0: string;
}>;
export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Attach = ContractEventLog<{
  tokenId: string;
  0: string;
}>;
export type Deposit = ContractEventLog<{
  provider: string;
  tokenId: string;
  value: string;
  locktime: string;
  deposit_type: string;
  ts: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Detach = ContractEventLog<{
  tokenId: string;
  0: string;
}>;
export type SetVoter = ContractEventLog<{
  voter: string;
  0: string;
}>;
export type Supply = ContractEventLog<{
  prevSupply: string;
  supply: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type Voting = ContractEventLog<{
  tokenId: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  provider: string;
  tokenId: string;
  value: string;
  ts: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface VeTokenABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VeTokenABI;
  clone(): VeTokenABI;
  methods: {
    abstain(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    approve(
      _approved: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    attach(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    attachments(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOf(_owner: string): NonPayableTransactionObject<string>;

    balanceOfAtNFT(
      _tokenId: number | string | BN,
      _block: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOfNFT(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOfNFTAt(
      _tokenId: number | string | BN,
      _t: number | string | BN
    ): NonPayableTransactionObject<string>;

    block_number(): NonPayableTransactionObject<string>;

    checkpoint(): NonPayableTransactionObject<void>;

    create_lock(
      _value: number | string | BN,
      _lock_duration: number | string | BN
    ): NonPayableTransactionObject<string>;

    create_lock_for(
      _value: number | string | BN,
      _lock_duration: number | string | BN,
      _to: string
    ): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    deposit_for(
      _tokenId: number | string | BN,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    detach(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    epoch(): NonPayableTransactionObject<string>;

    getApproved(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    get_last_user_slope(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    increase_amount(
      _tokenId: number | string | BN,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    increase_unlock_time(
      _tokenId: number | string | BN,
      _lock_duration: number | string | BN
    ): NonPayableTransactionObject<void>;

    isApprovedForAll(
      _owner: string,
      _operator: string
    ): NonPayableTransactionObject<boolean>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    locked(arg0: number | string | BN): NonPayableTransactionObject<{
      amount: string;
      end: string;
      0: string;
      1: string;
    }>;

    locked__end(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    merge(
      _from: number | string | BN,
      _to: number | string | BN
    ): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    ownerOf(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    ownership_change(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    point_history(arg0: number | string | BN): NonPayableTransactionObject<{
      bias: string;
      slope: string;
      ts: string;
      blk: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean
    ): NonPayableTransactionObject<void>;

    setVoter(_voter: string): NonPayableTransactionObject<void>;

    slope_changes(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    supply(): NonPayableTransactionObject<string>;

    supportsInterface(
      _interfaceID: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenURI(
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    totalSupplyAt(
      _block: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupplyAtT(
      t: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    user_point_epoch(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    user_point_history(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      bias: string;
      slope: string;
      ts: string;
      blk: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    user_point_history__ts(
      _tokenId: number | string | BN,
      _idx: number | string | BN
    ): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;

    voted(arg0: number | string | BN): NonPayableTransactionObject<boolean>;

    voter(): NonPayableTransactionObject<string>;

    voting(_tokenId: number | string | BN): NonPayableTransactionObject<void>;

    withdraw(_tokenId: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Abstain(cb?: Callback<Abstain>): EventEmitter;
    Abstain(options?: EventOptions, cb?: Callback<Abstain>): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    Attach(cb?: Callback<Attach>): EventEmitter;
    Attach(options?: EventOptions, cb?: Callback<Attach>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Detach(cb?: Callback<Detach>): EventEmitter;
    Detach(options?: EventOptions, cb?: Callback<Detach>): EventEmitter;

    SetVoter(cb?: Callback<SetVoter>): EventEmitter;
    SetVoter(options?: EventOptions, cb?: Callback<SetVoter>): EventEmitter;

    Supply(cb?: Callback<Supply>): EventEmitter;
    Supply(options?: EventOptions, cb?: Callback<Supply>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Voting(cb?: Callback<Voting>): EventEmitter;
    Voting(options?: EventOptions, cb?: Callback<Voting>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Abstain", cb: Callback<Abstain>): void;
  once(event: "Abstain", options: EventOptions, cb: Callback<Abstain>): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "Attach", cb: Callback<Attach>): void;
  once(event: "Attach", options: EventOptions, cb: Callback<Attach>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Detach", cb: Callback<Detach>): void;
  once(event: "Detach", options: EventOptions, cb: Callback<Detach>): void;

  once(event: "SetVoter", cb: Callback<SetVoter>): void;
  once(event: "SetVoter", options: EventOptions, cb: Callback<SetVoter>): void;

  once(event: "Supply", cb: Callback<Supply>): void;
  once(event: "Supply", options: EventOptions, cb: Callback<Supply>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Voting", cb: Callback<Voting>): void;
  once(event: "Voting", options: EventOptions, cb: Callback<Voting>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
