/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AcceptPauser = ContractEventLog<{
  pauser: string;
  0: string;
}>;
export type PairCreated = ContractEventLog<{
  token0: string;
  token1: string;
  stable: boolean;
  pair: string;
  0: string;
  1: string;
  2: boolean;
  3: string;
  4: string;
}>;
export type SetPauser = ContractEventLog<{
  pendingPauser: string;
  0: string;
}>;

export interface FactoryABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FactoryABI;
  clone(): FactoryABI;
  methods: {
    acceptPauser(): NonPayableTransactionObject<void>;

    allPairs(arg0: number | string | BN): NonPayableTransactionObject<string>;

    allPairsLength(): NonPayableTransactionObject<string>;

    createPair(
      tokenA: string,
      tokenB: string,
      stable: boolean
    ): NonPayableTransactionObject<string>;

    getInitializable(): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: boolean;
    }>;

    getPair(
      arg0: string,
      arg1: string,
      arg2: boolean
    ): NonPayableTransactionObject<string>;

    isPair(arg0: string): NonPayableTransactionObject<boolean>;

    isPaused(): NonPayableTransactionObject<boolean>;

    pairCodeHash(): NonPayableTransactionObject<string>;

    pauser(): NonPayableTransactionObject<string>;

    pendingPauser(): NonPayableTransactionObject<string>;

    setPause(_state: boolean): NonPayableTransactionObject<void>;

    setPauser(_pauser: string): NonPayableTransactionObject<void>;
  };
  events: {
    AcceptPauser(cb?: Callback<AcceptPauser>): EventEmitter;
    AcceptPauser(
      options?: EventOptions,
      cb?: Callback<AcceptPauser>
    ): EventEmitter;

    PairCreated(cb?: Callback<PairCreated>): EventEmitter;
    PairCreated(
      options?: EventOptions,
      cb?: Callback<PairCreated>
    ): EventEmitter;

    SetPauser(cb?: Callback<SetPauser>): EventEmitter;
    SetPauser(options?: EventOptions, cb?: Callback<SetPauser>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AcceptPauser", cb: Callback<AcceptPauser>): void;
  once(
    event: "AcceptPauser",
    options: EventOptions,
    cb: Callback<AcceptPauser>
  ): void;

  once(event: "PairCreated", cb: Callback<PairCreated>): void;
  once(
    event: "PairCreated",
    options: EventOptions,
    cb: Callback<PairCreated>
  ): void;

  once(event: "SetPauser", cb: Callback<SetPauser>): void;
  once(
    event: "SetPauser",
    options: EventOptions,
    cb: Callback<SetPauser>
  ): void;
}
